name: release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Which tag to deploy as:"
        required: true
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  initialize-release-job:
    name: initialize-release-job
    runs-on: ubuntu-latest
    steps:
      - name: Get the release version from the tag
        if: env.VERSION == ''
        run: |
          if [[ -n "${{ github.event.inputs.tag }}" ]]; then
            echo "Manual run against a tag; overriding actual tag in the environment..."
            echo "VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi

      - name: Validate version environment variable
        run: |
          echo "Version being built against is version ${{ env.VERSION }}"!

      - name: Save version number to artifact
        run: echo "${{ env.VERSION }}" > release-version

      - name: Upload release-version as artifact
        uses: actions/upload-artifact@v2
        with:
          retention-days: 3
          name: release-version
          path: release-version

  build-release:
    name: build-release
    needs: [initialize-release-job]
    runs-on: ${{ matrix.triple.os }}
    container: ${{ matrix.triple.container }}
    env:
      RUST_BACKTRACE: 1
    strategy:
      fail-fast: false
      matrix:
        triple:
          - {
            os: "ubuntu-latest",
            target: "x86_64-unknown-linux-gnu",
            cross: false,
            strip: true,
          }
          - {
            os: "windows-latest",
            target: "x86_64-pc-windows-gnu",
            cross: false,
          }

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.triple.target }}

      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.triple.target }}

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --verbose --target=${{ matrix.triple.target }}
          use-cross: ${{ matrix.triple.cross }}

      - name: Strip release binary (Linux x86-64)
        if: matrix.triple.strip == true
        run: |
          strip target/${{ matrix.triple.target }}/release/fido

      - name: Bundle release (Windows)
        if: matrix.triple.os == 'windows-latest'
        shell: bash
        run: |
          cp target/${{ matrix.triple.target }}/release/fido.exe fido.exe
          7z a fido_${{ matrix.triple.target }}.zip "fido.exe"
          echo "ASSET=fido_${{ matrix.triple.target }}.zip" >> $GITHUB_ENV

      - name: Bundle release (Linux)
        if: matrix.triple.os != 'windows-latest'
        shell: bash
        run: |
          cp target/${{ matrix.triple.target }}/release/fido ./fido
          tar -czvf fido_${{ matrix.triple.target }}${{ matrix.triple.suffix }}.tar.gz fido
          echo "ASSET=fido_${{ matrix.triple.target }}${{ matrix.triple.suffix }}.tar.gz" >> $GITHUB_ENV

      - name: Create release directory for artifact, move file
        shell: bash
        run: |
          mkdir release
          mv ${{ env.ASSET }} release/

      - name: Save release as artifact
        uses: actions/upload-artifact@v2
        with:
          retention-days: 3
          name: release
          path: release

  upload-release:
    name: upload-release
    runs-on: ubuntu-latest
    needs: [build-release]
    steps:
      - name: Get release version
        uses: actions/download-artifact@v2
        with:
          name: release-version
          path: release-version

      - name: Set release version
        shell: bash
        run: |
          release_version="$(cat ./release-version/release-version)"
          echo "RELEASE_VERSION=$release_version" >> $GITHUB_ENV

      - name: Validate release version
        run: |
          echo "Release version: ${{ env.RELEASE_VERSION }}"

      - name: Get release artifacts
        uses: actions/download-artifact@v2
        with:
          name: release
          path: release

      - name: Print out all release files
        run: |
          echo "Generated $(ls ./release | wc -l) files:"
          ls ./release

      - name: Upload all saved release files
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: false
          tag_name: ${{ env.RELEASE_VERSION }}
          draft: true
          fail_on_unmatched_files: true
          name: ${{ env.RELEASE_VERSION }} Release
          body: |
            <!-- Write summary here -->
            ---

            ## Features

            ## Changes

            ## Bug Fixes

            ## Internal Changes
          files: |
            ./release/*
